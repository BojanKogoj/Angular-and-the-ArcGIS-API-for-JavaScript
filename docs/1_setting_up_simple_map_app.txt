SETTING UP A SIMPLE MAP APP.

This instruction set will guide you through setting up an Angular 2+ app, using the CLI and implemnting the ArcGIS Javascript API.

STEP 1: Generate an Angular App using the Angular CLI. (https://cli.angular.io/), e.g.,

	ng new my-app

STEP 2: Include the ArcGIS script and style tags at the top of the index.html page, e.g.,

    	<link rel="stylesheet" href="https://js.arcgis.com/4.5/esri/css/main.css">
    	<script src="https://js.arcgis.com/4.5/"></script>

STEP: 3: Copy the arc_gis_closure.js file from the code_files folder at the root of this repository, and save it to the src/assets folder inside your appliation.  Include the file in in your index.html file, e.g.,

	<script src="assets/js/arc_gis_closure.js"></script>

This inclusion should immediately follow the script tag that imports the ArcGIS API. Its function is to create a closure that will presevre the Dojo objects that were just instanced by the API.      

STEP 4: Use the Angualr CLI generate a service, e.g., 
  
	ng generate sservice services/arcgis

This service will inject the Dojo objects that you just preseved in your closure and make them available to your components.  The code to map the objects to your injector can be found in the arcgis.service.ts file in this repository.


STEP 5: Use the Angular CLI to generate a component for your map, e.g., 

	ng generate component map

STEP 6: After you have marked up your map.component.html and styled your map.component.css files to display the way you want them, you are ready to inject your ArcGIS service into your component. This takes three steps:

	6.a: Import the service into your component, e.g.,

		import { ArcGIS } from '../services/arcgis.service';

	6.b: Create class properties that will reference the Dojo objects you need in your component, e.g.,

		require;
		define;
		...

	6.c: In the component constructor, create a new instance of the ArcGIS service and assign the object references to the appropriate properties, e.g,

    		const ag = new ArcGIS();

		this.require = ag.require;
	
You're now ready to start building a map!  Working within your code will, you will need to reference the Dojo objects using this, this.require, this.define, etc.  Other than that your code should look the same as if you were working in native JavaScript.  

 